unit TestMaim;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, FMX.Graphics, FMX.Dialogs, FMX.StdCtrls, FMX.Memo, idGlobal,
  System.Types, IdUDPClient, FMX.Memo.Types, IdComponent, IdUDPBase, System.SysUtils,
  FMX.ComboEdit, FMX.Edit, System.Variants, FMX.ScrollBox, FMX.Controls.Presentation,
  System.UITypes, IdBaseComponent, FMX.Types, Maim, FMX.Forms, System.DateUtils,
  FMX.Controls, System.Classes;

type
  // Test methods for class TForm1

  TestTForm1 = class(TTestCase)
  strict private
    FForm1: TForm1;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDrawLineEncode;
    procedure TestDrawEllipseEncode;
    procedure TestDrawTextEncode;
  end;

implementation

procedure TestTForm1.SetUp;
begin
  FForm1 := TForm1.Create(nil);
end;

procedure TestTForm1.TearDown;
begin
  FForm1.Free;
  FForm1 := nil;
end;

procedure TestTForm1.TestDrawLineEncode;
var
  ReturnValue: string;
  parcolor: string;
  pary2: string;
  parx2: string;
  pary1: string;
  parx1: string;
  sendcommand: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FForm1.DrawLineEncode(sendcommand, parx1, pary1, parx2, pary2,
      parcolor);
  // TODO: Validate method results
end;

procedure TestTForm1.TestDrawEllipseEncode;
var
  ReturnValue: string;
  parcolor: string;
  ely2: string;
  elx2: string;
  ely1: string;
  elx1: string;
  sendcommand: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FForm1.DrawEllipseEncode(sendcommand, elx1, ely1, elx2, ely2,
      parcolor);
  // TODO: Validate method results
end;

procedure TestTForm1.TestDrawTextEncode;
var
  ReturnValue: string;
  parcolor: string;
  text: string;
  ty2: string;
  tx2: string;
  ty1: string;
  tx1: string;
  sendcommand: string;
begin

  parcolor:='red';
  text:='text';
  ty2:='100';
  tx2:='100';
  ty1:='0';
  tx1:='0';
  sendcommand:='0';

  // TODO: Setup method call parameters
  ReturnValue := FForm1.DrawTextEncode(sendcommand, tx1, ty1, tx2, ty2, text,
      parcolor);

  CheckEqualsString('0 0 0 100 100 hello red',ReturnValue);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTForm1.Suite);
end.

